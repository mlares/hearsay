import numpy as np


# Resources: 
# http://interactivepython.org/courselib/static/pythonds/BasicDS/ImplementinganOrderedList.html


# NODE AND LINKED LIST CLASSES
#{{{
class Node:
    def __init__(self,data):
        self.data = data
        self.next = None

    def getData(self):
        return self.data

    def getNext(self):
        return self.next

    def setNext(self,newnext):
        self.next = newnext


class OrderedList:
    def __init__(self):
        self.head = None
        #self.last = None
   
    def show(self):
        current = self.head
        while current != None:
            print(current.getData())
            current = current.getNext()        
    


    def add(self,item):
        current = self.head
        previous = None
        stop = False

        while current is not None or not stop:

            #if current.getData() > item:
            if current.getData() is None:  #reach last of queue
                stop = True
            else:
                previous = current
                current = current.getNext()

        temp = Node(item)
        if previous == None:
            temp.setNext(self.head)
            self.head = temp
        else:
            temp.setNext(current)
            previous.setNext(temp)



            
    def remove_first(self):
        self.head = self.head.getNext()
            
    def isEmpty(self):
        return self.head == None

    def size(self):
        current = self.head
        count = 0
        while current != None:
            count = count + 1
            current = current.getNext()
        return count
#}}}

# PERSONALIZED FUNCTIONS
#{{{
def ShowCETIs(CETIs):
    for i in range(len(CETIs)):
        print('%3d          (%5.0f, %5.0f) lyr  <%5.0f, %5.0f> yr' % CETIs[i][0][1:])
        k = len(CETIs[i]) - 1
        for l in range(k):
            print('%3d sees %3d (%5.0f, %5.0f) lyr  <%5.0f, %5.0f> yr' % CETIs[i][l+1])

            Dx = np.sqrt(((
                np.array(CETIs[i][0][2:4]) - 
                np.array(CETIs[i][l+1][2:4]))**2).sum())

#}}}
 


# otra version de "queue as linked list"
#
# class Node:
#    def __init__(self, data):
#       self.data = data
#       self.next = None
# 
#class Queue:
#    def __init__(self):
#        self.head = None
#        self.last = None
# 
#    def enqueue(self, data):
#        if self.last is None:
#            self.head = Node(data)
#            self.last = self.head
#        else:
#            self.last.next = Node(data)
#            self.last = self.last.next
# 
#    def dequeue(self):
#        if self.head is None:
#            return None
#        else:
#            to_return = self.head.data
#            self.head = self.head.next
#            return to_return
# 
#a_queue = Queue()
#while True:
#    print('enqueue <value>')
#    print('dequeue')
#    print('quit')
#    do = input('What would you like to do? ').split()
# 
#    operation = do[0].strip().lower()
#    if operation == 'enqueue':
#        a_queue.enqueue(int(do[1]))
#    elif operation == 'dequeue':
#        dequeued = a_queue.dequeue()
#        if dequeued is None:
#            print('Queue is empty.')
#        else:
#            print('Dequeued element: ', int(dequeued))
#    elif operation == 'quit':
#        break
